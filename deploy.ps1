param(
    [switch]$RemoveBeforeInstall
)

# Stop script on any error
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

#[Environment]::SetEnvironmentVariable("ARM_CLIENT_ID", $Env:ARM_CLIENT_ID, "Process")
#[Environment]::SetEnvironmentVariable("ARM_CLIENT_SECRET", $Env:ARM_CLIENT_SECRET, "Process")
#[Environment]::SetEnvironmentVariable("ARM_SUBSCRIPTION_ID", $Env:ARM_SUBSCRIPTION_ID, "Process")
#[Environment]::SetEnvironmentVariable("ARM_TENANT_ID", $Env:ARM_TENANT_ID, "Process")

<#
docker run --rm -it `
    -e ARM_CLIENT_ID `
    -e ARM_CLIENT_SECRET `
    -e ARM_SUBSCRIPTION_ID `
    -e ARM_TENANT_ID `
    -v $(pwd):/data `
    --workdir=/data `
    --entrypoint "/bin/sh" `
    hashicorp/terraform:light `
    -c "/bin/terraform get; `
        /bin/terraform validate; `
        /bin/terraform plan -out=out.tfplan -var unique=$KEY -var resource_group=$KEY; `
        /bin/terraform apply out.tfplan; `
        /bin/terraform show;"
#>


##################################################
# Validation
##################################################
if (-not (Test-Path env:subscription_id)) { throw "Enviornment variable [subscription_id] is REQUIRED" }
if (-not (Test-Path env:client_id)) { throw "Enviornment variable [client_id] is REQUIRED" }
if (-not (Test-Path env:client_secret)) { throw "Enviornment variable [client_secret] is REQUIRED" }
if (-not (Test-Path env:tenant_id)) { throw "Enviornment variable [tenant_id] is REQUIRED" }
##################################################

###################################################################################
# BEGIN : FUNCTIONS
###################################################################################

function main() {

    try {
        # (Start) Capture duration metrics
        $BuildTime = [Diagnostics.Stopwatch]::StartNew()

        [Environment]::SetEnvironmentVariable("ADAL_PYTHON_SSL_NO_VERIFY", "1", "User")
        [Environment]::SetEnvironmentVariable("AZURE_CLI_DISABLE_CONNECTION_VERIFICATION", "1", "User")

        az login --service-principal -u "$($Env:client_id)" -p "$($Env:client_secret)" --tenant "$($Env:tenant_id)"
        if ($LASTEXITCODE -ne 0) { throw "Failure logging in to Azure"}
        az account get-access-token
        #return

        # Create tfvars file
        if (Test-Path .\terraform.tfvars) { Remove-Item -Path .\terraform.tfvars -Force | Out-Null }
        $terraformvars = @" 
subscription_id = "$($Env:subscription_id)"
client_id = "$($Env:client_id)"
client_secret = "$($Env:client_secret)"
tenant_id = "$($Env:tenant_id)"
"@ 
        $terraformvars | Out-File -FilePath .\terraform.tfvars -Encoding ASCII -Force

        # init
        if (-not(Test-Path "./terraform")) {
            terraform init
            if ($LASTEXITCODE -ne 0) { throw "Failure initializing terraform"}
        }

        #if ($RemoveBeforeInstall) {
        #    terraform destroy -auto-approve;
        #}


        # Used to download and update modules mentioned in the root module
        terraform get;

        # Used to validate the syntax of the terraform files
        terraform validate
        if ($LASTEXITCODE -ne 0) { throw "Failure validating terraform files"}


        # Used to create an execution plan
        terraform plan
        if ($LASTEXITCODE -ne 0) { throw "Failure executing terraform plan"}

        # Used to apply the changes required to reach the desired state of the configuration, or the pre-determined set of actions generated by a terraform plan execution plan
        #terraform apply -auto-approve;
        #if ($LASTEXITCODE -ne 0) { throw "Failure executing terraform apply"}

        # Display execution duration
        $BuildTime.Stop()
        $TimeOutput = $BuildTime.Elapsed
        Write-Host "Total build time: [$($TimeOutput.Minutes)m $($TimeOutput.Seconds)s]"
    }
    catch {
        Write-Error $_.Exception.Message
        throw
    }
    finally {
        # Clean up
        if (Test-Path .\terraform.tfvars) {
            Remove-Item -Path .\terraform.tfvars -Force | Out-Null
        }
    }
} 

###################################################################################
# END : FUNCTIONS
###################################################################################

# Call main
main
